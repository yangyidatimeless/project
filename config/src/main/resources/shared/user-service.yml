server:
  servlet:
    context-path: /user
my:
  dad: yfl

spring:  
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://localhost:3306/user?useUnicode=true&characterEncoding=UTF-8&useSSL=false
      username: root
      password: 123456
      #初始化连接数量，最大最小连接数
      initialSize: 5
      maxActive: 10
      minIdle: 3
      #获取连接等待超时的时间
      maxWait: 600000
      #超过时间限制是否回收
      removeAbandoned: true
      #超过时间限制多长
      removeAbandonedTimeout: 180
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 600000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      #用来检测连接是否有效的sql，要求是一个查询语句
      validationQuery: SELECT 1 FROM DUAL
      #申请连接的时候检测
      testWhileIdle: true
      #申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnBorrow: false
      #归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
      testOnReturn: false
      #打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 50
      #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
      #监控统计用的filter:stat 日志用的filter:log4j 防御SQL注入的filter:wall
      filters: stat

mybatis:
  type-aliases-package: com.yyd.user.domain
  mapper-locations: classpath:mapper/*.xml
  
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
  returnPageInfo: check
    
sharding:
  jdbc:
    datasource:
      names: user
      user:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user
        username: root
        password: 123456
    config:
      sharding:
        default-data-source-name: user
        tables:
          mem_user:
            actual-data-nodes: user.mem_user_${0..1}
            table-strategy:
              standard:
                sharding-column: sharding_id
                precise-algorithm-class-name: com.yyd.user.config.ShardingAlgorithm
            key-generator-column-name: id
        props:
          sql:
            show: true
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=user_id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}


redis:
  database: 0
  host: localhost
  port: 6379 
  password: 
   timeout: 10000
  lettuce: 
    pool:
      max-active: 20 
      max-idle: 10 
      max-wait: 1000 
      min-idle: 5 

feign:
  hystrix:
    enabled: true
hystrix: 
  command: 
    default: 
      execution: 
        isolation: 
          thread: 
            timeoutInMilliseconds: 5000
#ribbon:
#  ConnectTimeout: 500
#  ReadTimeout: 5000
     
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}
    

    